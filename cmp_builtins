#! /bin/bash
#
# cmp_buildins 1.2.2, 2020-10-31, 2020-11-01
#
# Listet die bash-internen Kommandos auf, fÃ¼r die ein ksh-internes
# Kommando gleichen Namens existiert.
#
# Bernd Storck, https://www.facebook.com/BStLinux/
#

# Data for program self description:
PROGNAME="cmp_buildins"
PROG_VERSION="1.2.2"

# Temporary files for shell exclusive builtins:
NOT_BASH="/tmp/not_in_bash"
ONLY_BASH="/tmp/not_in_other"

function build_cmd_lists {
# Retrieval of builtin commands.
#   - bash:     compgen -b
#   - ksh:      ksh builtin | sed '/\//d'
#   - tcsh:     tcsh -c "builtins
#   - fish:     builtin -n|--names
#   - zsh:      print -roC1 ${(k)builtins}  # builtins ist ein assoziatives Array.
    BASH_BUILTIN="$(compgen -b)"
    case "$1" in
        ksh)
            OTHERS_BUILTIN="$(ksh builtin | sed '/\//d')";;
        zsh)
            OTHERS_BUILTIN="$(zsh -c 'print -roC1 ${(k)builtins}' | sed '/\//d')";;
        tcsh)
            OTHERS_BUILTIN="$(tcsh -c 'builtins')";;
        fish)
            OTHERS_BUILTIN="$(fish -c 'builtin -n')";;
        elvish)
            echo -e "#!$(which elvish)\nuse builtin\nkeys \$builtin:\n" > /tmp/elvish_builtins
            OTHERS_BUILTIN="$(elvish /tmp/elvish_builtins | sed -En '/\~$/s/^..(.*)~$/\1/p' | sort)"
            rm -f /tmp/elvish_builtins
            ;; 
    esac
}

function build_format_cmd { # Derived from the scripts enver and param.
# Defines the formatting command for the program columns or the
# program column, depending on their existence.
    for i in columns column
    do
        if [ "$(which ${i})" ]; then
            case "$i" in
              columns)
                FORMAT_BASH="columns -w 17"
                FORMAT_CMD="columns -c 4 -w 16"
                ;;
              column)
                FORMATTER="column"
                FORMAT_BASH="column -w 80"
                FORMAT_CMD="column -c 64"
                ;;
            esac
            break
        fi
    done
}

function headline {
# Echos $1 in bold white.
     echo -e "\n\e[1;37m$1\e[0m"
}

function write_exclusive_commands {
	headline "$1"
	if [ -n "$FORMAT_CMD" ]; then
		eval "$FORMAT_CMD" < "$2"
	else
		cat "$2" | tr '\n' ' ' | fmt -w 64
	fi
#	echo
}

function read_version_variable {
# Reads the shell version for fish, ksh and zsh.

BINARY_NAME="$1"
VERSION_VARIABLE="$2"

# Create a temproary script file:
echo "#!$(which $BINARY_NAME)
echo \"$VERSION_VARIABLE\"
" > /tmp/sh_version

# Execute temorary script for reading shell variable:
SHLVERS="$($BINARY_NAME /tmp/sh_version)"
[ "$BINARY_NAME" = "ksh" ] && SHLVERS="${SHLVERS#[Vv]ersion }"

# Cleaning: Removes the temporary script file:
rm -f /tmp/sh_version
}

function get_version {
# Reads shell version to global variable SHLVERS and selects the method
# depending on the shell.
if [[ "$1" != "bash" && "$1" != "tcsh" && "$1" != "elvish" ]]; then
    case "$1" in
        ksh) # It's possible simply to parse "ksh --version", but i do not
             # like the result. So I will make it a little bit more tricky.
            read_version_variable "ksh" "\$KSH_VERSION";;
        zsh)
            read_version_variable "zsh" "\$ZSH_VERSION";;
        fish)
            read_version_variable "fish" "\$FISH_VERSION";;
    esac
else
    case "$1" in

        bash)
            SHLVERS="$BASH_VERSION";;
        tcsh)
            # tcsh 6.20.00 (Astron) 2016-11-24 (x86_64-unknown-linux) options wide,nls,dl,al,kan,sm,rh,nd,color,filec
            SHLVERS="$(
                tcsh --version | sed -E 's/^(.*) options.*$/\1/; s/tcsh //' |\
                sed -E 's:^(.* [12][0-9]{3}(-[0-9]{2}){2}).*$:\1:'
            )"
            ;;
        elvish)
			# $ elvish -buildinfo 2> /dev/null
			# version: 0.11+ds1-3
			# builder: pkg-go-maintainers@lists.alioth.debian.org
			#
			# $ elvish -buildinfo 2> /dev/null
			# Version: HEAD
			# Go version: go1.13.5
			# Reproducible build: true
            SHLVERS="$(/usr/local/bin/elvish -buildinfo 2> /dev/null |\
                        awk -F ':' '/[Vv]ersion/ {printf "%s", $2}'  |\
					    sed 's/^[[:blank:]]*//'
                      )"
		    ;;
    esac
fi
}

function shell_info {
# Writes general information about the shells to screen:
# full name, year of first public release, present version.
    current_version=
    case "$1" in
        bash)
            short_description="bash (Bourne Again Shell, first 1989)"
            current_version="$BASH_VERSION";;
        zsh)
            short_description="zsh (Z Shell, first 1990)"
            get_version "zsh"
            current_version="$SHLVERS";;
        ksh)
            short_description="ksh (Korn Shell, first 1983)"
            get_version "ksh"
            current_version="$SHLVERS";;
        tcsh)
            short_description="tcsh (Tenex C-Shell, first 1981/83)"
            get_version "tcsh"
            current_version="$SHLVERS";;
        fish)
            short_description="fish (Friendly Interactive Shell, first 2005)"
            get_version "fish"
            current_version="$SHLVERS";;
       elvish)
            short_description="Elvish (first 2016)"
            get_version "elvish"
            current_version="$SHLVERS";;
       esac
    headline "$short_description"
    [ "$current_version" ] && echo "Version at this system: $current_version"
}

### main ####################
rm -f "$NOT_BASH" "$ONLY_BASH"
clear

if [ "$1" != "-s" ]; then
    shell_info "bash"
    shell_info "$1"
fi

build_cmd_lists "$1"
build_format_cmd

## Data collection begins
headline "In bash and also in $1:"
for i in $BASH_BUILTIN; do
    [ "$i" = "[" ] && i="\["
    if grep -wq "$i" <<< "$OTHERS_BUILTIN"; then
        echo "${i/\\/}"
    else
        echo "${i/\\/}" >> "$ONLY_BASH"
    fi
done | eval "$FORMAT_BASH"

for i in $OTHERS_BUILTIN; do
    buildin="$(sed -E 's:[\+\[\-]:\\&:g' <<< "$i")"
    if ! grep -wq "$buildin" <<< "$BASH_BUILTIN"; then
        echo "${i/\\/}" >> "$NOT_BASH"
    fi
done

if [ "$FORMATTER" = "column" ]; then
# Trailing spaces fixing a bug of the program column.
    sed -i 's/$/  /g' "$NOT_BASH"
fi

# Writes shell specific builtin commands to stdout:
write_exclusive_commands "Only bash:" "$ONLY_BASH"
write_exclusive_commands "Only $1:" "$NOT_BASH"

rm -f "$NOT_BASH" "$ONLY_BASH"

exit 0
